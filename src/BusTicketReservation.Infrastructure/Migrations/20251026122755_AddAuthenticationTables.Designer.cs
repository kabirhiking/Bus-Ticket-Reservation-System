// <auto-generated />
using System;
using BusTicketReservation.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BusTicketReservation.Infrastructure.Migrations
{
    [DbContext(typeof(BusTicketDbContext))]
    [Migration("20251026122755_AddAuthenticationTables")]
    partial class AddAuthenticationTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Bus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BusType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Buses", (string)null);
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.BusSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("BusId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("JourneyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("JourneyDate")
                        .HasDatabaseName("IX_BusSchedules_JourneyDate");

                    b.HasIndex("RouteId", "JourneyDate")
                        .HasDatabaseName("IX_BusSchedules_RouteId_JourneyDate");

                    b.ToTable("BusSchedules", (string)null);
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.OtpCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AttemptCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character(6)")
                        .IsFixedLength();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("MaxAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3);

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_OtpCodes_ExpiresAt");

                    b.HasIndex("UserId");

                    b.HasIndex("Email", "Purpose", "ExpiresAt")
                        .HasDatabaseName("IX_OtpCodes_Email_Purpose_ExpiresAt");

                    b.HasIndex("Email", "Purpose", "IsUsed")
                        .HasDatabaseName("IX_OtpCodes_Email_Purpose_IsUsed");

                    b.ToTable("OtpCodes", (string)null);
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Passenger", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MobileNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Passengers_MobileNumber");

                    b.ToTable("Passengers", (string)null);
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Distance")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<TimeSpan>("EstimatedDuration")
                        .HasColumnType("interval");

                    b.Property<string>("FromCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ToCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FromCity")
                        .HasDatabaseName("IX_Routes_FromCity");

                    b.HasIndex("ToCity")
                        .HasDatabaseName("IX_Routes_ToCity");

                    b.HasIndex("FromCity", "ToCity")
                        .HasDatabaseName("IX_Routes_FromCity_ToCity");

                    b.ToTable("Routes", (string)null);
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SeatNumber")
                        .HasDatabaseName("IX_Seats_SeatNumber");

                    b.HasIndex("BusId", "SeatNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Seats_BusId_SeatNumber");

                    b.HasIndex("BusId", "Status")
                        .HasDatabaseName("IX_Seats_BusId_Status");

                    b.ToTable("Seats", (string)null);
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BoardingPoint")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("BusScheduleId")
                        .HasColumnType("uuid");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DroppingPoint")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BusScheduleId")
                        .HasDatabaseName("IX_Tickets_BusScheduleId");

                    b.HasIndex("PassengerId")
                        .HasDatabaseName("IX_Tickets_PassengerId");

                    b.HasIndex("SeatId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("SeatId", "BusScheduleId")
                        .IsUnique()
                        .HasDatabaseName("IX_Tickets_SeatId_BusScheduleId_Unique")
                        .HasFilter("\"Status\" = 'Confirmed'");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsEmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Users_IsActive");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.BusSchedule", b =>
                {
                    b.HasOne("BusTicketReservation.Domain.Entities.Bus", "Bus")
                        .WithMany("Schedules")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusTicketReservation.Domain.Entities.Route", "Route")
                        .WithMany("BusSchedules")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("BusTicketReservation.Domain.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("BusScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("Price");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("Currency");

                            b1.HasKey("BusScheduleId");

                            b1.ToTable("BusSchedules");

                            b1.WithOwner()
                                .HasForeignKey("BusScheduleId");
                        });

                    b.Navigation("Bus");

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.OtpCode", b =>
                {
                    b.HasOne("BusTicketReservation.Domain.Entities.User", "User")
                        .WithMany("OtpCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Seat", b =>
                {
                    b.HasOne("BusTicketReservation.Domain.Entities.Bus", "Bus")
                        .WithMany("Seats")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("BusTicketReservation.Domain.Entities.BusSchedule", "BusSchedule")
                        .WithMany("Tickets")
                        .HasForeignKey("BusScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusTicketReservation.Domain.Entities.Passenger", "Passenger")
                        .WithMany("Tickets")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicketReservation.Domain.Entities.Seat", "Seat")
                        .WithOne("Ticket")
                        .HasForeignKey("BusTicketReservation.Domain.Entities.Ticket", "SeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusTicketReservation.Domain.Entities.User", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("BusTicketReservation.Domain.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("Price");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("Currency");

                            b1.HasKey("TicketId");

                            b1.ToTable("Tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.Navigation("BusSchedule");

                    b.Navigation("Passenger");

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Bus", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.BusSchedule", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Passenger", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Route", b =>
                {
                    b.Navigation("BusSchedules");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Seat", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.User", b =>
                {
                    b.Navigation("OtpCodes");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
